%% initialization
warning('off');
close all;
clear;
clc;

%% handle dependencies
% [file_list,~] = matlab.codetools.requiredFilesAndProducts(mfilename);
% n_files = numel(file_list);
% for ii = 1 : n_files
%
%     dest_path = fullfile(root_path,'dependencies');
%     copyfile(file_list{ii},dest_path);
% end

%% task selection
task_str = 'duration';
% task_str = 'intensity';

%% directory settings
root_path = fileparts(which(mfilename));
addpath(genpath(root_path));
cd(root_path);
data_path = fullfile(root_path,'data');
file_name = sprintf('%c%s_rats.mat',upper(task_str(1)),task_str(2:end));
data_file = fullfile(data_path,file_name);
load(data_file);
data = DataB.Info;
data.Rts = DataB.RT;
clear DataB;

%% save settings
panel_path = fullfile(root_path,'panels',task_str);
raster_path = fullfile(root_path,'rasters',task_str);
if ~exist(panel_path,'dir')
    mkdir(panel_path);
end
if ~exist(raster_path,'dir')
    mkdir(raster_path);
end
want2save = true;

%% preface
toso2021_preface;

%% contrast settings
contrast_str = 'i2';
contrasts = eval(contrast_str);
% contrasts = prev_choices;
contrast_set = eval([contrast_str(1:end-1),'_set']);
n_contrasts = numel(contrast_set);
contrast_mode_idx = find(contrast_set == mode(contrasts));
contrast_clrs = eval([contrast_str,'_clrs']);
contrast_units = eval([contrast_str(1),'_units']);
contrast_lbl = [upper(contrast_str(1)),'_',contrast_str(2)];
% contrast_lbl = ['prev. ',upper(contrast_str(1)),'_',contrast_str(2)];

%% script execution order
toso2021_contractionBias;
toso2021_choiceGLM;
toso2021_psychometricCurves;
toso2021_trialTypeDistributions;
toso2021_neuronSelection;
toso2021_overallModulation;
toso2021_tiling;
toso2021_t2AlignedPCA;
toso2021_PCA;
toso2021_hierarchicalClustering;
toso2021_neurometricCurves;
toso2021_naiveBayesDecoder;
% toso2021_rasters;

%% multiplicity
mult_flags = valid_flags & diff([0;data.NeuronNumb]) == 1;
stimuli = round(t2 * w2 + t1 * w1);
t2_minus_t1 = stimuli(valid_flags) > ...
    nanmedian(unique((stimuli(valid_flags))));
t2_plus_t1 = t2(valid_flags) + t1(valid_flags) > ...
    nanmedian(unique((t2(valid_flags) + t1(valid_flags))));
t2_alone = t2(valid_flags) > nanmedian(unique((t2(valid_flags))));

ground_truth = t2(valid_flags) - t1(valid_flags) > 0;

figure; hold on;
win = 50;
kernel = expkernel('mus',win,'binwidth',1);
plot(conv(choices(valid_flags) == ground_truth,kernel.pdf,'valid'),...
    'linewidth',1.5);
plot(conv(t2_minus_t1 == ground_truth,kernel.pdf,'valid'));
plot(conv(t2_plus_t1 == ground_truth,kernel.pdf,'valid'));
plot(conv(t2_alone == ground_truth,kernel.pdf,'valid'));

ylabel('Proportion')
xlabel('Trial #')
xlim([win,5000])
ylim([0,1])

legend({...
    'choices == T_2 - T_1',...
    'w_2 \times T_2 + w_1 \times T_1 == T_2 - T_1',...
    'T_2 + T_1 == T_2 - T_1',...
    'T_2 > med(T_2) == T_2 - T_1'})
